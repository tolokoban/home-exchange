(()=>{"use strict";var t,n,e,o={9165:(t,n,e)=>{e.d(n,{A:()=>a});var o=e(1354),r=e.n(o),s=e(6314),i=e.n(s)()(r());i.push([t.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n    font-size: min(24px, 3.75vw);\n    line-height: 1.5;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nh1 {\n    font-size: 130%;\n}\n\na,\na:visited {\n    color: var(--theme-color-secondary-5);\n    font-weight: bold;\n    font-variant: small-caps;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;IACvB,4BAA4B;IAC5B,gBAAgB;AACpB;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,qCAAqC;IACrC,iBAAiB;IACjB,wBAAwB;AAC5B",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n    font-size: min(24px, 3.75vw);\n    line-height: 1.5;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nh1 {\n    font-size: 130%;\n}\n\na,\na:visited {\n    color: var(--theme-color-secondary-5);\n    font-weight: bold;\n    font-variant: small-caps;\n}\n'],sourceRoot:""}]);const a=i},9419:(t,n,e)=>{e.d(n,{Di:()=>c,bw:()=>r,ig:()=>i,s9:()=>h});var o=e(6540);const r={"/":["/"],"/section":["/section"],"/section/doors":["/section/doors"],"/section/garbage":["/section/garbage"],"/section/internet":["/section/internet"],"/section/kitchen":["/section/kitchen"],"/section/tourism":["/section/tourism"]};function s(t,...n){var e;const o=function(t,n){const e=r[t];let o=0;return e.map((t=>"["===t.charAt(0)?n[o++]:t)).join("/")}(t,n);return o!==(null===(e=p().value)||void 0===e?void 0:e.path)&&(window.location.hash=o,!0)}function i(t,...n){return()=>{s(t,...n)}}function a(t){let n=null;for(const e of Object.values(r)){const o=c(t,e);if(o){if(0===o.distance)return o;(!n||o.distance<n.distance)&&(n=o)}}return n}function c(t,n){if(!n)return null;let e=t;const o={};for(let t=0;t<n.length;t++){if(e.length<1)return null;const r=n[t];if(r.startsWith("[")){const t=r.substring(1,r.length-1),[n,s]=l(e);o[t]=n,e=s}else{if(!e.startsWith(r))return null;e=e.substring(r.length+1)}}return{path:t,route:n.join("/"),params:o,distance:e.length}}function l(t){const n=t.indexOf("/");return n<0?[t,""]:[t.substring(0,n),t.substring(n+1)]}class u{constructor(t){this.security=t,this.listeners=new Set,this._value=null,this.handleHashChange=t=>{const n=this.extractHash(t.oldURL),e=this.extractHash(t.newURL),o=this.ensureAbsoluteHash(e,n);o!==e&&history.replaceState({},"",`#${o}`),this.setHash(o)},this.nonEmpty=t=>"string"==typeof t&&t.trim().length>0;const n=this.extractHash(window.location.href);this.setHash(n).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((t=>{console.error(`Unable to set hash to "${n}":`,t)}))}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}get value(){return this._value}setHash(t){return n=this,e=void 0,r=function*(){var n;let e=a(t);if(e)for(const[n,o]of this.security){if(!e.route.startsWith(n))continue;const r=yield o(e.route,t);if(r&&r!==e.route){if(e=a(r),!e)break;return this._value=null,void s(e.path)}}(null===(n=this._value)||void 0===n?void 0:n.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((t=>t(e))))},new((o=void 0)||(o=Promise))((function(t,s){function i(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(n){var e;n.done?t(n.value):(e=n.value,e instanceof o?e:new o((function(t){t(e)}))).then(i,a)}c((r=r.apply(n,e||[])).next())}));var n,e,o,r}extractHash(t){const n=new URL(t).hash;return n?n.startsWith("#")?n.substring(1):n:"/"}ensureAbsoluteHash(t,n){if(t.startsWith("/"))return t;let e=t;for(;e.startsWith("./");)e=e.substring(2);const o=n.split("/").filter(this.nonEmpty);for(const n of t.split("/"))".."===n?o.length>0&&o.pop():o.push(n);return`/${o.filter(this.nonEmpty).join("/")}`}}function h(){const[t,n]=o.useState(p().value);return o.useEffect((()=>{const t=t=>{n(t)};return p().addListener(t),()=>p().removeListener(t)}),[]),t}const d=[];let f=null;function p(){return f||(f=new u(d)),f}},5290:(t,n,e)=>{var o=e(4848),r=e(6540),s=e(5338),i=e(8803),a=e(9419);const c=r.lazy((()=>e.e(906).then(e.bind(e,1906)))),l=r.lazy((()=>e.e(784).then(e.bind(e,9784)))),u=r.lazy((()=>e.e(698).then(e.bind(e,2698)))),h=r.lazy((()=>e.e(300).then(e.bind(e,3300)))),d=r.lazy((()=>e.e(525).then(e.bind(e,9525)))),f=r.lazy((()=>e.e(712).then(e.bind(e,9712))));function p({lang:t}){const n=(0,a.s9)(),e=(0,o.jsx)("div",{children:"Loading..."}),r=c,s=l,i=u,p=h,g=d,m=f;return(0,o.jsx)(A,{path:"/",Page:r,fallback:e,context:n,children:(0,o.jsxs)(A,{path:"/section",fallback:e,context:n,children:[(0,o.jsx)(A,{path:"/section/doors",Page:s,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/garbage",Page:i,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/internet",Page:p,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/kitchen",Page:g,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/tourism",Page:m,fallback:e,context:n})]})})}function A({path:t,fallback:n,children:e,Page:s,Layout:i,Template:c,context:l}){const u=l&&(0,a.Di)(l.path,a.bw[t]);if(!u)return null;if(0===u.distance){if(!s)return null;const t=c?(0,o.jsx)(c,{params:u.params,children:(0,o.jsx)(s,{params:u.params})}):(0,o.jsx)(s,{params:u.params});return i?(0,o.jsx)(i,{params:u.params,children:(0,o.jsx)(r.Suspense,{fallback:n,children:t})}):(0,o.jsx)(r.Suspense,{fallback:n,children:t})}return i?(0,o.jsx)(i,{params:u.params,children:e}):(0,o.jsx)(o.Fragment,{children:e})}var g=e(5072),m=e.n(g),v=e(7825),b=e.n(v),y=e(7659),w=e.n(y),C=e(5056),x=e.n(C),j=e(540),k=e.n(j),B=e(1113),I=e.n(B),E=e(9165),S={};S.styleTagTransform=I(),S.setAttributes=x(),S.insert=w().bind(null,"head"),S.domAPI=b(),S.insertStyleElement=k(),m()(E.A,S),E.A&&E.A.locals&&E.A.locals,function(){i.Sxu.apply();const t=document.getElementById("root");(0,s.H)(t).render((0,o.jsx)(r.StrictMode,{children:(0,o.jsx)(i.Znq,{children:(0,o.jsx)(p,{})})})),function(){const t=document.getElementById("tgd-logo");t&&(t.classList.add("vanish"),window.setTimeout((()=>{const n=t.parentNode;n&&n.removeChild(t)}),900))}()}()}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var e=r[t]={id:t,exports:{}};return o[t].call(e.exports,e,e.exports,s),e.exports}s.m=o,t=[],s.O=(n,e,o,r)=>{if(!e){var i=1/0;for(u=0;u<t.length;u++){for(var[e,o,r]=t[u],a=!0,c=0;c<e.length;c++)(!1&r||i>=r)&&Object.keys(s.O).every((t=>s.O[t](e[c])))?e.splice(c--,1):(a=!1,r<i&&(i=r));if(a){t.splice(u--,1);var l=o();void 0!==l&&(n=l)}}return n}r=r||0;for(var u=t.length;u>0&&t[u-1][2]>r;u--)t[u]=t[u-1];t[u]=[e,o,r]},s.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return s.d(n,{a:n}),n},s.d=(t,n)=>{for(var e in n)s.o(n,e)&&!s.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((n,e)=>(s.f[e](t,n),n)),[])),s.u=t=>"scr/"+t+"."+{300:"3da31b74afda96de174d",525:"630cefb3a3c20cc330eb",698:"56672d2ad42b9a6f662a",712:"06a3043677f05a05feba",784:"9c9a7e30e64dee3d0ed4",906:"991a4269d5c95475c403"}[t]+".js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),n={},e="...:",s.l=(t,o,r,i)=>{if(n[t])n[t].push(o);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var h=l[u];if(h.getAttribute("src")==t||h.getAttribute("data-webpack")==e+r){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",e+r),a.src=t),n[t]=[o];var d=(e,o)=>{a.onerror=a.onload=null,clearTimeout(f);var r=n[t];if(delete n[t],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((t=>t(o))),e)return e(o)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var n=s.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");if(e.length)for(var o=e.length-1;o>-1&&(!t||!/^http(s?):/.test(t));)t=e[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t+"../"})(),(()=>{var t={524:0};s.f.j=(n,e)=>{var o=s.o(t,n)?t[n]:void 0;if(0!==o)if(o)e.push(o[2]);else{var r=new Promise(((e,r)=>o=t[n]=[e,r]));e.push(o[2]=r);var i=s.p+s.u(n),a=new Error;s.l(i,(e=>{if(s.o(t,n)&&(0!==(o=t[n])&&(t[n]=void 0),o)){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;a.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,o[1](a)}}),"chunk-"+n,n)}},s.O.j=n=>0===t[n];var n=(n,e)=>{var o,r,[i,a,c]=e,l=0;if(i.some((n=>0!==t[n]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(c)var u=c(s)}for(n&&n(e);l<i.length;l++)r=i[l],s.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return s.O(u)},e=self.webpackChunk_=self.webpackChunk_||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),s.nc=void 0;var i=s.O(void 0,[44],(()=>s(5290)));i=s.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T2xDLEVBQW9CUSxFQUFFQyxFQUFPLEVBR2pDcUYsRUFBcUJDLEtBQW9CLGNBQUlBLEtBQW9CLGVBQUssR0FDMUVELEVBQW1CckosUUFBUStJLEVBQXFCdEIsS0FBSyxLQUFNLElBQzNENEIsRUFBbUJsTyxLQUFPNE4sRUFBcUJ0QixLQUFLLEtBQU00QixFQUFtQmxPLEtBQUtzTSxLQUFLNEIsRyxLQ3JGdkY5RixFQUFvQnlELFFBQUt0RCxFQ0d6QixJQUFJNkYsRUFBc0JoRyxFQUFvQlEsT0FBRUwsRUFBVyxDQUFDLEtBQUssSUFBT0gsRUFBb0IsUUFDNUZnRyxFQUFzQmhHLEVBQW9CUSxFQUFFd0YsRSIsInNvdXJjZXMiOlsid2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9ob21lLWV4Y2hhbmdlL3NyYy9pbmRleC5jc3MiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvaG9tZS1leGNoYW5nZS9zcmMvYXBwL3JvdXRlcy50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9ob21lLWV4Y2hhbmdlL3NyYy9hcHAvaW5kZXgudHN4Iiwid2VicGFjazovLy4uLi8uL3NyYy9pbmRleC5jc3M/YjAyZiIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9ob21lLWV4Y2hhbmdlL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiLi4uOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwsXG5ib2R5LFxuI3Jvb3Qge1xuICAgIG1hcmdpbjogMDtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiBtaW4oMjRweCwgMy43NXZ3KTtcbiAgICBsaW5lLWhlaWdodDogMS41O1xufVxuXG5jb2RlIHtcbiAgICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXCJDb3VyaWVyIE5ld1wiLFxuICAgICAgICBtb25vc3BhY2U7XG59XG5cbiN0Z2QtbG9nby52YW5pc2gge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjlzO1xufVxuXG5oMSB7XG4gICAgZm9udC1zaXplOiAxMzAlO1xufVxuXG5hLFxuYTp2aXNpdGVkIHtcbiAgICBjb2xvcjogdmFyKC0tdGhlbWUtY29sb3Itc2Vjb25kYXJ5LTUpO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtdmFyaWFudDogc21hbGwtY2Fwcztcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7O0lBR0ksU0FBUztJQUNULG1DQUFtQztJQUNuQyxrQ0FBa0M7SUFDbEMsa0JBQWtCO0lBQ2xCLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsNEJBQTRCO0lBQzVCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJO2lCQUNhO0FBQ2pCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7O0lBRUkscUNBQXFDO0lBQ3JDLGlCQUFpQjtJQUNqQix3QkFBd0I7QUFDNUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCxcXG5ib2R5LFxcbiNyb290IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IG1pbigyNHB4LCAzLjc1dncpO1xcbiAgICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG5jb2RlIHtcXG4gICAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJDb3VyaWVyIE5ld1xcXCIsXFxuICAgICAgICBtb25vc3BhY2U7XFxufVxcblxcbiN0Z2QtbG9nby52YW5pc2gge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuOXM7XFxufVxcblxcbmgxIHtcXG4gICAgZm9udC1zaXplOiAxMzAlO1xcbn1cXG5cXG5hLFxcbmE6dmlzaXRlZCB7XFxuICAgIGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1zZWNvbmRhcnktNSk7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvKipcbiAqIGJ1aWxkLXJlYWN0LXJvdXRlc1xuICpcbiAqIFdBUk5JTkchIHRoaXMgZmlsZSBoYXMgYmVlbiBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbiAqIFBsZWFzZSBkbyBub3QgZWRpdCBpdCBiZWNhdXNlIGl0IHdpbGwgcHJvYmFibHkgYmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogSWYgeW91IGZpbmQgYSBidWcgb3IgaWYgeW91IG5lZWQgYW4gaW1wcm92ZW1lbnQsIHBsZWFzZSBmaWxsIGFuIGlzc3VlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RvbG9rb2Jhbi9idWlsZC1yZWFjdC1yb3V0ZXMvaXNzdWVzXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7IFJvdXRlUGF0aCwgUm91dGVNYXRjaCB9IGZyb20gXCIuL3R5cGVzXCJcblxuXG5leHBvcnQgY29uc3QgUk9VVEVTOiBSZWNvcmQ8Um91dGVQYXRoLCBzdHJpbmdbXT4gPSB7XG4gICAgXCIvXCI6IFtcIi9cIl0sXG4gICAgXCIvc2VjdGlvblwiOiBbXCIvc2VjdGlvblwiXSxcbiAgICBcIi9zZWN0aW9uL2Rvb3JzXCI6IFtcIi9zZWN0aW9uL2Rvb3JzXCJdLFxuICAgIFwiL3NlY3Rpb24vZ2FyYmFnZVwiOiBbXCIvc2VjdGlvbi9nYXJiYWdlXCJdLFxuICAgIFwiL3NlY3Rpb24vaW50ZXJuZXRcIjogW1wiL3NlY3Rpb24vaW50ZXJuZXRcIl0sXG4gICAgXCIvc2VjdGlvbi9raXRjaGVuXCI6IFtcIi9zZWN0aW9uL2tpdGNoZW5cIl0sXG4gICAgXCIvc2VjdGlvbi90b3VyaXNtXCI6IFtcIi9zZWN0aW9uL3RvdXJpc21cIl0sXG59XG5cbi8qKlxuICogVXNpbmcgdGhpcyBmdW5jdGlvbiBwcmV2ZW50cyBkYW5nbGluZyByb3V0ZXMgZnJvbSBiZWluZ1xuICogZGlzY292ZXJlZCBhdCBydW50aW1lLiBJZiB5b3UgdHJ5IHRvIHJlYWNoIGEgcm91dGUgdGhhdFxuICogZG9lcyBub3QgZXhpc3QgYW55bW9yZSwgeW91IHdpbGwgZ2V0IGEgY29tcGlsYXRpb24gZXJyb3IuXG4gKiBAcGFyYW0gcm91dGUgQ2Fub25pYyBuYW1lIG9mIHRoZSB0YXJnZXQgcm91dGUuXG4gKiBAcGFyYW0gcGFyYW1zIElmIHRoZSBjYW5vbmljYWwgbmFtZSBoYXMgYFtuYW1lXWAgcGFydHMsXG4gKiB0aGV5IHdpbGwgYmUgaHlkcmF0ZWQgYnkgdGhlIGBwYXJhbXNgLlxuICogRm9yIGluc3RhbmNlLCBgZ290byhcIi9hcnRpY2xlL1tpZF0vZGV0YWlsXCIsIDI3KWAgd2lsbCBsZWFkXG4gKiB0byBgXCIvYXJ0aWNsZS8yNy9kZXRhaWxcImAuXG4gKiBAcmV0dXJucyBgZmFsc2VgIGlmIHdlIGFscmVhZHkgYXJlIG9uIHRoaXMgcGFnZSAod2l0aCB0aGUgc2FtZSBwYXJhbXMpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ290byhyb3V0ZTogUm91dGVQYXRoLCAuLi5wYXJhbXM6IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICBjb25zdCBwYXRoID0gaHlkcmF0ZVJvdXRlKHJvdXRlLCBwYXJhbXMpXG4gICAgaWYgKHBhdGggPT09IGdldFJvdXRlQ29udGV4dCgpLnZhbHVlPy5wYXRoKSByZXR1cm4gZmFsc2VcblxuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aFxuICAgIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogU3ludGF4aWMgc3VnYXIgdG8gcmV0dXJuIGAoKSA9PiB7IGdvdG8oLi4uKSB9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VHb3RvKHJvdXRlOiBSb3V0ZVBhdGgsIC4uLnBhcmFtczogKHN0cmluZyB8IG51bWJlcilbXSkge1xuICAgIHJldHVybiAoKSA9PiB7IGdvdG8ocm91dGUsIC4uLnBhcmFtcykgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSb3V0ZUVxdWFsVG8ocm91dGU6IFJvdXRlUGF0aCwgLi4ucGFyYW1zOiAoc3RyaW5nIHwgbnVtYmVyKVtdKSB7XG4gICAgcmV0dXJuIGdldFJvdXRlQ29udGV4dCgpLnZhbHVlPy5wYXRoID09PSBoeWRyYXRlUm91dGUocm91dGUsIHBhcmFtcylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSb3V0ZUZvclBhdGgocGF0aDogc3RyaW5nKTogUm91dGVNYXRjaCB8IG51bGwge1xuICAgIGxldCBiZXN0TWF0Y2g6IFJvdXRlTWF0Y2ggfCBudWxsID0gbnVsbFxuICAgIGZvciAoY29uc3QgcGFydHMgb2YgT2JqZWN0LnZhbHVlcyhST1VURVMpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hSb3V0ZShwYXRoLCBwYXJ0cylcbiAgICAgICAgaWYgKCFtYXRjaCkgY29udGludWVcblxuICAgICAgICBpZiAobWF0Y2guZGlzdGFuY2UgPT09IDApIHJldHVybiBtYXRjaFxuXG4gICAgICAgIGlmICghYmVzdE1hdGNoIHx8IG1hdGNoLmRpc3RhbmNlIDwgYmVzdE1hdGNoLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICBiZXN0TWF0Y2ggPSBtYXRjaFxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0TWF0Y2hcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUm91dGUocGF0aDogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10gfCB1bmRlZmluZWQpOiBSb3V0ZU1hdGNoIHwgbnVsbCB7XG4gICAgaWYgKCFwYXJ0cykgcmV0dXJuIG51bGxcbiAgICBcbiAgICBsZXQgY3VycmVudCA9IHBhdGhcbiAgICBjb25zdCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoIDwgMSkgcmV0dXJuIG51bGxcblxuICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV1cbiAgICAgICAgaWYgKHBhcnQuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwYXJ0LnN1YnN0cmluZygxLCBwYXJ0Lmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBjb25zdCBbaGVhZCwgdGFpbF0gPSBkZWNhcGl0YXRlKGN1cnJlbnQpXG4gICAgICAgICAgICBwYXJhbXNbbmFtZV0gPSBoZWFkXG4gICAgICAgICAgICBjdXJyZW50ID0gdGFpbFxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuc3RhcnRzV2l0aChwYXJ0KSkge1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc3Vic3RyaW5nKHBhcnQubGVuZ3RoICsgMSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWF0Y2g6IFJvdXRlTWF0Y2ggPSB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHJvdXRlOiBwYXJ0cy5qb2luKFwiL1wiKSBhcyBSb3V0ZVBhdGgsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgZGlzdGFuY2U6IGN1cnJlbnQubGVuZ3RoLFxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hcbn1cblxuZnVuY3Rpb24gZGVjYXBpdGF0ZSh0ZXh0OiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddIHtcbiAgICBjb25zdCBwb3MgPSB0ZXh0LmluZGV4T2YoXCIvXCIpXG4gICAgaWYgKHBvcyA8IDApIHJldHVybiBbdGV4dCwgXCJcIl1cblxuICAgIHJldHVybiBbdGV4dC5zdWJzdHJpbmcoMCwgcG9zKSwgdGV4dC5zdWJzdHJpbmcocG9zICsgMSldXG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVSb3V0ZShyb3V0ZTogUm91dGVQYXRoLCBwYXJhbXM6IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICBjb25zdCBpdGVtcyA9IFJPVVRFU1tyb3V0ZV1cbiAgICBsZXQgaSA9IDBcbiAgICByZXR1cm4gaXRlbXNcbiAgICAgICAgLm1hcChpdGVtID0+IChpdGVtLmNoYXJBdCgwKSA9PT0gXCJbXCIgPyBwYXJhbXNbaSsrXSA6IGl0ZW0pKVxuICAgICAgICAuam9pbihcIi9cIilcbn1cblxuY2xhc3MgUm91dGVDb250ZXh0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpc3RlbmVycyA9IG5ldyBTZXQ8KGNvbnRleHQ6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB2b2lkPigpXG4gICAgcHJpdmF0ZSBfdmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsID0gbnVsbFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjdXJpdHk6IFtcbiAgICAgICAgICAgIFJvdXRlUGF0aCxcbiAgICAgICAgICAgIChwYXRoOiBSb3V0ZVBhdGgsIGhhc2g6IHN0cmluZykgPT4gUHJvbWlzZTxSb3V0ZVBhdGggfCB1bmRlZmluZWQ+XG4gICAgICAgIF1bXVxuICAgICkge1xuICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5leHRyYWN0SGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICAgICAgdGhpcy5zZXRIYXNoKGhhc2gpLnRoZW4oKCkgPT5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCB0aGlzLmhhbmRsZUhhc2hDaGFuZ2UpXG4gICAgICAgICkuY2F0Y2goZXggPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVW5hYmxlIHRvIHNldCBoYXNoIHRvIFwiJHtoYXNofVwiOmAsIGV4KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyOiAodmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmFkZChsaXN0ZW5lcilcbiAgICB9XG5cbiAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcjogKHZhbHVlOiBSb3V0ZU1hdGNoIHwgbnVsbCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpXG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldEhhc2goaGFzaDogc3RyaW5nKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGZpbmRSb3V0ZUZvclBhdGgoaGFzaClcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtyb3V0ZSwgYWNjZXNzXSBvZiB0aGlzLnNlY3VyaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5yb3V0ZS5zdGFydHNXaXRoKHJvdXRlKSkgY29udGludWVcblxuICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhvcml6ZWRSb3V0ZSA9IGF3YWl0IGFjY2Vzcyh2YWx1ZS5yb3V0ZSwgaGFzaClcbiAgICAgICAgICAgICAgICBpZiAoYXV0aG9yaXplZFJvdXRlICYmIGF1dGhvcml6ZWRSb3V0ZSAhPT0gdmFsdWUucm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaW5kUm91dGVGb3JQYXRoKGF1dGhvcml6ZWRSb3V0ZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgYnJlYWtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgZ290byh2YWx1ZS5wYXRoIGFzIFJvdXRlUGF0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl92YWx1ZT8ucm91dGUgPT09IHZhbHVlPy5yb3V0ZSkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKHZhbHVlKSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZUhhc2hDaGFuZ2UgPSAoZXZlbnQ6IEhhc2hDaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBvbGRIYXNoID0gdGhpcy5leHRyYWN0SGFzaChldmVudC5vbGRVUkwpXG4gICAgICAgIGNvbnN0IG5ld0hhc2ggPSB0aGlzLmV4dHJhY3RIYXNoKGV2ZW50Lm5ld1VSTClcbiAgICAgICAgY29uc3QgYWJzSGFzaCA9IHRoaXMuZW5zdXJlQWJzb2x1dGVIYXNoKG5ld0hhc2gsIG9sZEhhc2gpXG4gICAgICAgIGlmIChhYnNIYXNoICE9PSBuZXdIYXNoKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgYCMke2Fic0hhc2h9YClcbiAgICAgICAgfVxuICAgICAgICB2b2lkIHRoaXMuc2V0SGFzaChhYnNIYXNoKVxuICAgIH1cblxuICAgIHByaXZhdGUgZXh0cmFjdEhhc2godXJsOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBVUkwodXJsKS5oYXNoXG4gICAgICAgIGlmICghaGFzaCkgcmV0dXJuIFwiL1wiXG5cbiAgICAgICAgcmV0dXJuIGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoLnN1YnN0cmluZygxKSA6IGhhc2hcbiAgICB9XG5cbiAgICBwcml2YXRlIGVuc3VyZUFic29sdXRlSGFzaChuZXdIYXNoOiBzdHJpbmcsIG9sZEhhc2g6IHN0cmluZykge1xuICAgICAgICBpZiAobmV3SGFzaC5zdGFydHNXaXRoKFwiL1wiKSkgcmV0dXJuIG5ld0hhc2hcblxuICAgICAgICBsZXQgaGFzaCA9IG5ld0hhc2hcbiAgICAgICAgd2hpbGUgKGhhc2guc3RhcnRzV2l0aChcIi4vXCIpKSB7XG4gICAgICAgICAgICBoYXNoID0gaGFzaC5zdWJzdHJpbmcoXCIuL1wiLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gb2xkSGFzaC5zcGxpdChcIi9cIikuZmlsdGVyKHRoaXMubm9uRW1wdHkpXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBuZXdIYXNoLnNwbGl0KFwiL1wiKSkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IFwiLi5cIikge1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHBhdGgucG9wKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGl0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAvJHtwYXRoLmZpbHRlcih0aGlzLm5vbkVtcHR5KS5qb2luKFwiL1wiKX1gXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBub25FbXB0eSA9IChzOiB1bmtub3duKTogcyBpcyBzdHJpbmcgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHMgPT09IFwic3RyaW5nXCIgJiYgcy50cmltKCkubGVuZ3RoID4gMFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dCgpOiBSb3V0ZU1hdGNoIHwgbnVsbCB7XG4gICAgY29uc3QgW3BhcmFtcywgc2V0UGFyYW1zXSA9IFJlYWN0LnVzZVN0YXRlKGdldFJvdXRlQ29udGV4dCgpLnZhbHVlKVxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9ICh2YWx1ZTogUm91dGVNYXRjaCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIHNldFBhcmFtcyh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBnZXRSb3V0ZUNvbnRleHQoKS5hZGRMaXN0ZW5lcih1cGRhdGUpXG4gICAgICAgIHJldHVybiAoKSA9PiBnZXRSb3V0ZUNvbnRleHQoKS5yZW1vdmVMaXN0ZW5lcih1cGRhdGUpXG4gICAgfSwgW10pXG4gICAgcmV0dXJuIHBhcmFtc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVQYXJhbXM8VCBleHRlbmRzIHN0cmluZz4oXG4gICAgLi4ubmFtZXM6IFRbXVxuKTogUGFydGlhbDxSZWNvcmQ8VCwgc3RyaW5nPj4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VSb3V0ZUNvbnRleHQoKVxuICAgIGNvbnN0IHBhcmFtczogUGFydGlhbDxSZWNvcmQ8VCwgc3RyaW5nPj4gPSB7fVxuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb250ZXh0LnBhcmFtc1tuYW1lXVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgcGFyYW1zW25hbWVdID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zXG59XG5cbmNvbnN0IGlzTnVtYmVyID0gKGRhdGE6IHVua25vd24pOiBkYXRhIGlzIG51bWJlciA9PiB0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIlxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVQYXJhbUFzSW50KG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodXNlUm91dGVQYXJhbShuYW1lLCBkZWZhdWx0VmFsdWUsIGlzTnVtYmVyKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlUGFyYW1Bc0Zsb2F0KG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHVzZVJvdXRlUGFyYW0obmFtZSwgZGVmYXVsdFZhbHVlLCBpc051bWJlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlUGFyYW08VD4oXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGRlZmF1bHRWYWx1ZTogVCxcbiAgICB0eXBlR3VhcmQ6IChkYXRhOiB1bmtub3duKSA9PiBkYXRhIGlzIFRcbik6IFQge1xuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVJvdXRlUGFyYW1zKG5hbWUpXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXNbbmFtZV0gPz8gXCJcIilcbiAgICAgICAgY29uc3QgdmFsdWU6IHVua25vd24gPSBKU09OLnBhcnNlKHRleHQpXG4gICAgICAgIHJldHVybiB0eXBlR3VhcmQodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWVcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gICAgfVxufVxuXG4vLyBJbml0aWFsaXplIFJvdXRlQ29udGV4dCB3aXRoIHBvdGVudGlhbCBhY2Nlc3MgZmlsZXNcbmNvbnN0IFNFQ1VSSVRZOiBbUm91dGVQYXRoLCAocGF0aDogUm91dGVQYXRoLCBoYXNoOiBzdHJpbmcpID0+IFByb21pc2U8Um91dGVQYXRoIHwgdW5kZWZpbmVkPl1bXSA9IFtcblxuXVxubGV0IGN1cnJlbnRSb3V0ZUNvbnRleHQ6IG51bGwgfCBSb3V0ZUNvbnRleHQgPSBudWxsXG5cbmZ1bmN0aW9uIGdldFJvdXRlQ29udGV4dCgpIHtcbiAgICBpZiAoIWN1cnJlbnRSb3V0ZUNvbnRleHQpIGN1cnJlbnRSb3V0ZUNvbnRleHQgPSBuZXcgUm91dGVDb250ZXh0KFNFQ1VSSVRZKVxuICAgIHJldHVybiBjdXJyZW50Um91dGVDb250ZXh0XG59IiwiLyoqXG4gKiBidWlsZC1yZWFjdC1yb3V0ZXNcbiAqXG4gKiBXQVJOSU5HISB0aGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG4gKiBQbGVhc2UgZG8gbm90IGVkaXQgaXQgYmVjYXVzZSBpdCB3aWxsIHByb2JhYmx5IGJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIElmIHlvdSBmaW5kIGEgYnVnIG9yIGlmIHlvdSBuZWVkIGFuIGltcHJvdmVtZW50LCBwbGVhc2UgZmlsbCBhbiBpc3N1ZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90b2xva29iYW4vYnVpbGQtcmVhY3Qtcm91dGVzL2lzc3Vlc1xuICovXG5cbmV4cG9ydCAqIGZyb20gXCIuL3JvdXRlc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuXG5pbXBvcnQgeyBtYXRjaFJvdXRlLCB1c2VSb3V0ZUNvbnRleHQsIFJPVVRFUyB9IGZyb20gXCIuL3JvdXRlc1wiXG5pbXBvcnQgeyBSb3V0ZU1hdGNoLCBSb3V0ZVBhdGggfSBmcm9tIFwiLi90eXBlc1wiXG5cbmNvbnN0IFBhZ2UwID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3BhZ2VcIikpXG5jb25zdCBQYWdlMiA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi9zZWN0aW9uL2Rvb3JzL3BhZ2VcIikpXG5jb25zdCBQYWdlMyA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi9zZWN0aW9uL2dhcmJhZ2UvcGFnZVwiKSlcbmNvbnN0IFBhZ2U0ID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3NlY3Rpb24vaW50ZXJuZXQvcGFnZVwiKSlcbmNvbnN0IFBhZ2U1ID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3NlY3Rpb24va2l0Y2hlbi9wYWdlXCIpKVxuY29uc3QgUGFnZTYgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vc2VjdGlvbi90b3VyaXNtL3BhZ2VcIikpXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IGxhbmcgfTogeyBsYW5nPzogc3RyaW5nIH0pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlUm91dGVDb250ZXh0KClcbiAgICBjb25zdCBmYiA9IDxkaXY+TG9hZGluZy4uLjwvZGl2PlxuICAgIGNvbnN0IHBnMCA9IFBhZ2UwXG4gICAgY29uc3QgcGcyID0gUGFnZTJcbiAgICBjb25zdCBwZzMgPSBQYWdlM1xuICAgIGNvbnN0IHBnNCA9IFBhZ2U0XG4gICAgY29uc3QgcGc1ID0gUGFnZTVcbiAgICBjb25zdCBwZzYgPSBQYWdlNlxuICAgIHJldHVybiAoXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIFBhZ2U9e3BnMH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlY3Rpb25cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlY3Rpb24vZG9vcnNcIiBQYWdlPXtwZzJ9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlY3Rpb24vZ2FyYmFnZVwiIFBhZ2U9e3BnM30gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fS8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VjdGlvbi9pbnRlcm5ldFwiIFBhZ2U9e3BnNH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fS8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VjdGlvbi9raXRjaGVuXCIgUGFnZT17cGc1fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9Lz5cbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zZWN0aW9uL3RvdXJpc21cIiBQYWdlPXtwZzZ9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgPC9Sb3V0ZT5cbiAgICApXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmZ1bmN0aW9uIGludGw8VCBleHRlbmRzIFBhZ2VDb21wb25lbnQgfCBDb250YWluZXJDb21wb25lbnQgfCBKU1guRWxlbWVudD4oXG4gICAgcGFnZTogVCxcbiAgICB0cmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsIFQ+LFxuICAgIGxhbmcgPSBcIlwiXG4pOiBUIHtcbiAgICBjb25zdCBjYW5kaWRhdGUxID0gdHJhbnNsYXRpb25zW2xhbmddXG4gICAgaWYgKGNhbmRpZGF0ZTEpIHJldHVybiBjYW5kaWRhdGUxXG5cbiAgICBjb25zdCBbcHJlZml4XSA9IGxhbmcuc3BsaXQoXCItXCIpXG4gICAgY29uc3QgY2FuZGlkYXRlMiA9IHRyYW5zbGF0aW9uc1twcmVmaXhdXG4gICAgaWYgKGNhbmRpZGF0ZTIpIHJldHVybiBjYW5kaWRhdGUyXG5cbiAgICByZXR1cm4gcGFnZVxufVxuXG50eXBlIFBhZ2VDb21wb25lbnQgPSBSZWFjdC5GQzx7IHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9PlxudHlwZSBDb250YWluZXJDb21wb25lbnQgPSBSZWFjdC5GQzx7XG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICAgIHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxufT5cblxuaW50ZXJmYWNlIFJvdXRlUHJvcHMge1xuICAgIHBhdGg6IHN0cmluZ1xuICAgIGVsZW1lbnQ/OiBKU1guRWxlbWVudFxuICAgIGZhbGxiYWNrPzogSlNYLkVsZW1lbnRcbiAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZVxuICAgIFBhZ2U/OiBQYWdlQ29tcG9uZW50XG4gICAgTGF5b3V0PzogQ29udGFpbmVyQ29tcG9uZW50XG4gICAgVGVtcGxhdGU/OiBDb250YWluZXJDb21wb25lbnRcbiAgICBjb250ZXh0OiBSb3V0ZU1hdGNoIHwgbnVsbFxufVxuXG5mdW5jdGlvbiBSb3V0ZSh7XG4gICAgcGF0aCxcbiAgICBmYWxsYmFjayxcbiAgICBjaGlsZHJlbixcbiAgICBQYWdlLFxuICAgIExheW91dCxcbiAgICBUZW1wbGF0ZSxcbiAgICBjb250ZXh0LFxufTogUm91dGVQcm9wcykge1xuICAgIGNvbnN0IG1hdGNoID0gY29udGV4dCAmJiBtYXRjaFJvdXRlKGNvbnRleHQucGF0aCwgUk9VVEVTW3BhdGggYXMgUm91dGVQYXRoXSlcblxuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsXG5cbiAgICBpZiAobWF0Y2guZGlzdGFuY2UgPT09IDApIHtcbiAgICAgICAgaWYgKCFQYWdlKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBUZW1wbGF0ZSA/IChcbiAgICAgICAgICAgIDxUZW1wbGF0ZSBwYXJhbXM9e21hdGNoLnBhcmFtc30+XG4gICAgICAgICAgICAgICAgPFBhZ2UgcGFyYW1zPXttYXRjaC5wYXJhbXN9IC8+XG4gICAgICAgICAgICA8L1RlbXBsYXRlPlxuICAgICAgICApIDogKFxuICAgICAgICAgICAgPFBhZ2UgcGFyYW1zPXttYXRjaC5wYXJhbXN9IC8+XG4gICAgICAgIClcbiAgICAgICAgaWYgKExheW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8TGF5b3V0IHBhcmFtcz17bWF0Y2gucGFyYW1zfT5cbiAgICAgICAgICAgICAgICAgICAgPFJlYWN0LlN1c3BlbnNlIGZhbGxiYWNrPXtmYWxsYmFja30+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5TdXNwZW5zZT5cbiAgICAgICAgICAgICAgICA8L0xheW91dD5cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPFJlYWN0LlN1c3BlbnNlIGZhbGxiYWNrPXtmYWxsYmFja30+e2VsZW1lbnR9PC9SZWFjdC5TdXNwZW5zZT5cbiAgICB9XG4gICAgcmV0dXJuIExheW91dCA/IChcbiAgICAgICAgPExheW91dCBwYXJhbXM9e21hdGNoLnBhcmFtc30+e2NoaWxkcmVufTwvTGF5b3V0PlxuICAgICkgOiAoXG4gICAgICAgIDw+e2NoaWxkcmVufTwvPlxuICAgIClcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgeyBNb2RhbFByb3ZpZGVyLCBUaGVtZSB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vYXBwXCI7XG5cbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICBUaGVtZS5hcHBseSgpO1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNvbnRhaW5lcik7XG4gIHJvb3QucmVuZGVyKFxuICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgPE1vZGFsUHJvdmlkZXI+XG4gICAgICAgIDxBcHAgLz5cbiAgICAgIDwvTW9kYWxQcm92aWRlcj5cbiAgICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuICApO1xuICAvLyBSZW1vdmUgc3BsYXNoIHNjcmVlbi5cbiAgcmVtb3ZlU3BsYXNoU2NyZWVuKCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNwbGFzaFNjcmVlbigpIHtcbiAgY29uc3QgU1BMQVNIX1ZBTklTSElOR19ERUxBWSA9IDkwMDtcbiAgY29uc3Qgc3BsYXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0Z2QtbG9nb1wiKTtcbiAgaWYgKCFzcGxhc2gpIHJldHVybjtcblxuICBzcGxhc2guY2xhc3NMaXN0LmFkZChcInZhbmlzaFwiKTtcbiAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudCA9IHNwbGFzaC5wYXJlbnROb2RlO1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG5cbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoc3BsYXNoKTtcbiAgfSwgU1BMQVNIX1ZBTklTSElOR19ERUxBWSk7XG59XG5cbnZvaWQgc3RhcnQoKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwic2NyL1wiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMzAwXCI6XCI2NzU4MjNkMzQxMzBjZDBiNzA3NVwiLFwiNTI1XCI6XCJiY2M3ZjNjY2FjZWRjNWU4MjAzMVwiLFwiNjk4XCI6XCJlM2NlMzE2ZGI5ZmM2NDRhNzdlMlwiLFwiNzEyXCI6XCIzODUyODAzNzY0NjdjZmQ1OWMyZFwiLFwiNzg0XCI6XCJhZjlhZTlmYjc1YjUyZmU2NDQ2NVwiLFwiOTA2XCI6XCIyMzM0OGZjYjFjOWIxOWYxNzI5Y1wifVtjaHVua0lkXSArIFwiLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ1MjQ6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfXCJdID0gc2VsZltcIndlYnBhY2tDaHVua19cIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzQ0XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNTI5MCkpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiUk9VVEVTIiwiZ290byIsInJvdXRlIiwicGFyYW1zIiwicGF0aCIsIml0ZW1zIiwiaSIsIm1hcCIsIml0ZW0iLCJjaGFyQXQiLCJqb2luIiwiaHlkcmF0ZVJvdXRlIiwiZ2V0Um91dGVDb250ZXh0IiwidmFsdWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJtYWtlR290byIsImZpbmRSb3V0ZUZvclBhdGgiLCJiZXN0TWF0Y2giLCJwYXJ0cyIsIk9iamVjdCIsInZhbHVlcyIsIm1hdGNoIiwibWF0Y2hSb3V0ZSIsImRpc3RhbmNlIiwiY3VycmVudCIsImxlbmd0aCIsInBhcnQiLCJzdGFydHNXaXRoIiwibmFtZSIsInN1YnN0cmluZyIsImhlYWQiLCJ0YWlsIiwiZGVjYXBpdGF0ZSIsInRleHQiLCJwb3MiLCJpbmRleE9mIiwiUm91dGVDb250ZXh0IiwiY29uc3RydWN0b3IiLCJzZWN1cml0eSIsImxpc3RlbmVycyIsIlNldCIsIl92YWx1ZSIsImhhbmRsZUhhc2hDaGFuZ2UiLCJldmVudCIsIm9sZEhhc2giLCJ0aGlzIiwiZXh0cmFjdEhhc2giLCJvbGRVUkwiLCJuZXdIYXNoIiwibmV3VVJMIiwiYWJzSGFzaCIsImVuc3VyZUFic29sdXRlSGFzaCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJzZXRIYXNoIiwibm9uRW1wdHkiLCJzIiwidHJpbSIsImhyZWYiLCJ0aGVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhdGNoIiwiZXgiLCJjb25zb2xlIiwiZXJyb3IiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwiYWRkIiwicmVtb3ZlTGlzdGVuZXIiLCJkZWxldGUiLCJhY2Nlc3MiLCJhdXRob3JpemVkUm91dGUiLCJmb3JFYWNoIiwidXJsIiwiVVJMIiwic3BsaXQiLCJmaWx0ZXIiLCJwb3AiLCJ1c2VSb3V0ZUNvbnRleHQiLCJzZXRQYXJhbXMiLCJ1cGRhdGUiLCJTRUNVUklUWSIsImN1cnJlbnRSb3V0ZUNvbnRleHQiLCJQYWdlMCIsIlBhZ2UyIiwiUGFnZTMiLCJQYWdlNCIsIlBhZ2U1IiwiUGFnZTYiLCJBcHAiLCJsYW5nIiwiY29udGV4dCIsImZiIiwicGcwIiwicGcyIiwicGczIiwicGc0IiwicGc1IiwicGc2IiwiUm91dGUiLCJQYWdlIiwiZmFsbGJhY2siLCJjaGlsZHJlbiIsIkxheW91dCIsIlRlbXBsYXRlIiwiZWxlbWVudCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJhcHBseSIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW5kZXIiLCJzcGxhc2giLCJjbGFzc0xpc3QiLCJzZXRUaW1lb3V0IiwicGFyZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3BsYXNoU2NyZWVuIiwic3RhcnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiaiIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiZG9uZUZucyIsImJpbmQiLCJ0eXBlIiwidGFyZ2V0IiwiYXBwZW5kQ2hpbGQiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwidGVzdCIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJkYXRhIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==