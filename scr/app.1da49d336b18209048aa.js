(()=>{"use strict";var n,t,e,o={9165:(n,t,e)=>{e.d(t,{A:()=>a});var o=e(1354),r=e.n(o),i=e(6314),s=e.n(i)()(r());s.push([n.id,'html,\nbody,\n#root {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  font-family: sans-serif;\n  font-size: min(24px, 3.75vw);\n  line-height: 1.5;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n\n#tgd-logo.vanish {\n  opacity: 0;\n  transition: opacity 0.9s;\n}\n\nh1 {\n  font-size: 130%;\n}\n\na,\na:visited {\n  color: var(--theme-color-secondary-5);\n  font-weight: bold;\n  font-variant: small-caps;\n}\n\nimg {\n  max-width: min(95vw, 640px);\n}\n\ncode {\n  background-color: color-mix(in srgb, transparent 80%, currentColor);\n  border-radius: 0.25em;\n  padding: 0 0.25em;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;EAGE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;EAClC,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,QAAQ;EACR,SAAS;EACT,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,uBAAuB;EACvB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE;aACW;AACb;;AAEA;EACE,UAAU;EACV,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;;EAEE,qCAAqC;EACrC,iBAAiB;EACjB,wBAAwB;AAC1B;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,mEAAmE;EACnE,qBAAqB;EACrB,iBAAiB;AACnB",sourcesContent:['html,\nbody,\n#root {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  font-family: sans-serif;\n  font-size: min(24px, 3.75vw);\n  line-height: 1.5;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n\n#tgd-logo.vanish {\n  opacity: 0;\n  transition: opacity 0.9s;\n}\n\nh1 {\n  font-size: 130%;\n}\n\na,\na:visited {\n  color: var(--theme-color-secondary-5);\n  font-weight: bold;\n  font-variant: small-caps;\n}\n\nimg {\n  max-width: min(95vw, 640px);\n}\n\ncode {\n  background-color: color-mix(in srgb, transparent 80%, currentColor);\n  border-radius: 0.25em;\n  padding: 0 0.25em;\n}\n'],sourceRoot:""}]);const a=s},9419:(n,t,e)=>{e.d(t,{Di:()=>c,bw:()=>r,ig:()=>s,s9:()=>h});var o=e(6540);const r={"/":["/"],"/section":["/section"],"/section/doors":["/section/doors"],"/section/garbage":["/section/garbage"],"/section/internet":["/section/internet"],"/section/kitchen":["/section/kitchen"],"/section/tourism":["/section/tourism"]};function i(n,...t){var e;const o=function(n,t){const e=r[n];let o=0;return e.map((n=>"["===n.charAt(0)?t[o++]:n)).join("/")}(n,t);return o!==(null===(e=A().value)||void 0===e?void 0:e.path)&&(window.location.hash=o,!0)}function s(n,...t){return()=>{i(n,...t)}}function a(n){let t=null;for(const e of Object.values(r)){const o=c(n,e);if(o){if(0===o.distance)return o;(!t||o.distance<t.distance)&&(t=o)}}return t}function c(n,t){if(!t)return null;let e=n;const o={};for(let n=0;n<t.length;n++){if(e.length<1)return null;const r=t[n];if(r.startsWith("[")){const n=r.substring(1,r.length-1),[t,i]=l(e);o[n]=t,e=i}else{if(!e.startsWith(r))return null;e=e.substring(r.length+1)}}return{path:n,route:t.join("/"),params:o,distance:e.length}}function l(n){const t=n.indexOf("/");return t<0?[n,""]:[n.substring(0,t),n.substring(t+1)]}class u{constructor(n){this.security=n,this.listeners=new Set,this._value=null,this.handleHashChange=n=>{const t=this.extractHash(n.oldURL),e=this.extractHash(n.newURL),o=this.ensureAbsoluteHash(e,t);o!==e&&history.replaceState({},"",`#${o}`),this.setHash(o)},this.nonEmpty=n=>"string"==typeof n&&n.trim().length>0;const t=this.extractHash(window.location.href);this.setHash(t).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((n=>{console.error(`Unable to set hash to "${t}":`,n)}))}addListener(n){this.listeners.add(n)}removeListener(n){this.listeners.delete(n)}get value(){return this._value}setHash(n){return t=this,e=void 0,r=function*(){var t;let e=a(n);if(e)for(const[t,o]of this.security){if(!e.route.startsWith(t))continue;const r=yield o(e.route,n);if(r&&r!==e.route){if(e=a(r),!e)break;return this._value=null,void i(e.path)}}(null===(t=this._value)||void 0===t?void 0:t.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((n=>n(e))))},new((o=void 0)||(o=Promise))((function(n,i){function s(n){try{c(r.next(n))}catch(n){i(n)}}function a(n){try{c(r.throw(n))}catch(n){i(n)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}));var t,e,o,r}extractHash(n){const t=new URL(n).hash;return t?t.startsWith("#")?t.substring(1):t:"/"}ensureAbsoluteHash(n,t){if(n.startsWith("/"))return n;let e=n;for(;e.startsWith("./");)e=e.substring(2);const o=t.split("/").filter(this.nonEmpty);for(const t of n.split("/"))".."===t?o.length>0&&o.pop():o.push(t);return`/${o.filter(this.nonEmpty).join("/")}`}}function h(){const[n,t]=o.useState(A().value);return o.useEffect((()=>{const n=n=>{t(n)};return A().addListener(n),()=>A().removeListener(n)}),[]),n}const d=[];let f=null;function A(){return f||(f=new u(d)),f}},5290:(n,t,e)=>{var o=e(4848),r=e(6540),i=e(5338),s=e(8803),a=e(9419);const c=r.lazy((()=>e.e(906).then(e.bind(e,1906)))),l=r.lazy((()=>e.e(784).then(e.bind(e,9784)))),u=r.lazy((()=>e.e(698).then(e.bind(e,2698)))),h=r.lazy((()=>e.e(300).then(e.bind(e,3300)))),d=r.lazy((()=>e.e(525).then(e.bind(e,9525)))),f=r.lazy((()=>e.e(712).then(e.bind(e,9712))));function A({lang:n}){const t=(0,a.s9)(),e=(0,o.jsx)("div",{children:"Loading..."}),r=c,i=l,s=u,A=h,g=d,m=f;return(0,o.jsx)(p,{path:"/",Page:r,fallback:e,context:t,children:(0,o.jsxs)(p,{path:"/section",fallback:e,context:t,children:[(0,o.jsx)(p,{path:"/section/doors",Page:i,fallback:e,context:t}),(0,o.jsx)(p,{path:"/section/garbage",Page:s,fallback:e,context:t}),(0,o.jsx)(p,{path:"/section/internet",Page:A,fallback:e,context:t}),(0,o.jsx)(p,{path:"/section/kitchen",Page:g,fallback:e,context:t}),(0,o.jsx)(p,{path:"/section/tourism",Page:m,fallback:e,context:t})]})})}function p({path:n,fallback:t,children:e,Page:i,Layout:s,Template:c,context:l}){const u=l&&(0,a.Di)(l.path,a.bw[n]);if(!u)return null;if(0===u.distance){if(!i)return null;const n=c?(0,o.jsx)(c,{params:u.params,children:(0,o.jsx)(i,{params:u.params})}):(0,o.jsx)(i,{params:u.params});return s?(0,o.jsx)(s,{params:u.params,children:(0,o.jsx)(r.Suspense,{fallback:t,children:n})}):(0,o.jsx)(r.Suspense,{fallback:t,children:n})}return s?(0,o.jsx)(s,{params:u.params,children:e}):(0,o.jsx)(o.Fragment,{children:e})}var g=e(5072),m=e.n(g),b=e(7825),v=e.n(b),E=e(7659),y=e.n(E),C=e(5056),w=e.n(C),x=e(540),B=e.n(x),j=e(1113),k=e.n(j),S=e(9165),O={};O.styleTagTransform=k(),O.setAttributes=w(),O.insert=y().bind(null,"head"),O.domAPI=v(),O.insertStyleElement=B(),m()(S.A,O),S.A&&S.A.locals&&S.A.locals,function(){new s.Sxu({colors:{neutral:["#210","#876"]}}).apply();const n=document.getElementById("root");(0,i.H)(n).render((0,o.jsx)(r.StrictMode,{children:(0,o.jsx)(s.Znq,{children:(0,o.jsx)(A,{})})})),function(){const n=document.getElementById("tgd-logo");n&&(n.classList.add("vanish"),window.setTimeout((()=>{const t=n.parentNode;t&&t.removeChild(n)}),900))}()}()}},r={};function i(n){var t=r[n];if(void 0!==t)return t.exports;var e=r[n]={id:n,exports:{}};return o[n].call(e.exports,e,e.exports,i),e.exports}i.m=o,n=[],i.O=(t,e,o,r)=>{if(!e){var s=1/0;for(u=0;u<n.length;u++){for(var[e,o,r]=n[u],a=!0,c=0;c<e.length;c++)(!1&r||s>=r)&&Object.keys(i.O).every((n=>i.O[n](e[c])))?e.splice(c--,1):(a=!1,r<s&&(s=r));if(a){n.splice(u--,1);var l=o();void 0!==l&&(t=l)}}return t}r=r||0;for(var u=n.length;u>0&&n[u-1][2]>r;u--)n[u]=n[u-1];n[u]=[e,o,r]},i.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return i.d(t,{a:t}),t},i.d=(n,t)=>{for(var e in t)i.o(t,e)&&!i.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},i.f={},i.e=n=>Promise.all(Object.keys(i.f).reduce(((t,e)=>(i.f[e](n,t),t)),[])),i.u=n=>"scr/"+n+"."+{300:"bcb46bddb2f45d255e81",525:"aace042dfcfe13a9f6d4",698:"713c81e48ba9ba439713",712:"f9652a605e3f356e0390",784:"9c9a7e30e64dee3d0ed4",906:"991a4269d5c95475c403"}[n]+".js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),i.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),t={},e="...:",i.l=(n,o,r,s)=>{if(t[n])t[n].push(o);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var h=l[u];if(h.getAttribute("src")==n||h.getAttribute("data-webpack")==e+r){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,i.nc&&a.setAttribute("nonce",i.nc),a.setAttribute("data-webpack",e+r),a.src=n),t[n]=[o];var d=(e,o)=>{a.onerror=a.onload=null,clearTimeout(f);var r=t[n];if(delete t[n],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((n=>n(o))),e)return e(o)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},i.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;i.g.importScripts&&(n=i.g.location+"");var t=i.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");if(e.length)for(var o=e.length-1;o>-1&&(!n||!/^http(s?):/.test(n));)n=e[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=n+"../"})(),(()=>{var n={524:0};i.f.j=(t,e)=>{var o=i.o(n,t)?n[t]:void 0;if(0!==o)if(o)e.push(o[2]);else{var r=new Promise(((e,r)=>o=n[t]=[e,r]));e.push(o[2]=r);var s=i.p+i.u(t),a=new Error;i.l(s,(e=>{if(i.o(n,t)&&(0!==(o=n[t])&&(n[t]=void 0),o)){var r=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;a.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",a.name="ChunkLoadError",a.type=r,a.request=s,o[1](a)}}),"chunk-"+t,t)}},i.O.j=t=>0===n[t];var t=(t,e)=>{var o,r,[s,a,c]=e,l=0;if(s.some((t=>0!==n[t]))){for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(c)var u=c(i)}for(t&&t(e);l<s.length;l++)r=s[l],i.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return i.O(u)},e=self.webpackChunk_=self.webpackChunk_||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))})(),i.nc=void 0;var s=i.O(void 0,[44],(()=>i(5290)));s=i.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,