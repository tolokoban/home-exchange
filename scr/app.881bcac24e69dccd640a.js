(()=>{"use strict";var t,n,e,o={9165:(t,n,e)=>{e.d(n,{A:()=>a});var o=e(1354),r=e.n(o),s=e(6314),i=e.n(s)()(r());i.push([t.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n    font-size: min(24px, 3.75vw);\n    line-height: 1.5;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nh1 {\n    font-size: 130%;\n}\n\na,\na:visited {\n    color: var(--theme-color-secondary-5);\n    font-weight: bold;\n    font-variant: small-caps;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;IACvB,4BAA4B;IAC5B,gBAAgB;AACpB;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,qCAAqC;IACrC,iBAAiB;IACjB,wBAAwB;AAC5B",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n    font-size: min(24px, 3.75vw);\n    line-height: 1.5;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nh1 {\n    font-size: 130%;\n}\n\na,\na:visited {\n    color: var(--theme-color-secondary-5);\n    font-weight: bold;\n    font-variant: small-caps;\n}\n'],sourceRoot:""}]);const a=i},9419:(t,n,e)=>{e.d(n,{Di:()=>c,bw:()=>r,ig:()=>i,s9:()=>h});var o=e(6540);const r={"/":["/"],"/section":["/section"],"/section/doors":["/section/doors"],"/section/garbage":["/section/garbage"],"/section/internet":["/section/internet"],"/section/kitchen":["/section/kitchen"],"/section/tourism":["/section/tourism"]};function s(t,...n){var e;const o=function(t,n){const e=r[t];let o=0;return e.map((t=>"["===t.charAt(0)?n[o++]:t)).join("/")}(t,n);return o!==(null===(e=p().value)||void 0===e?void 0:e.path)&&(window.location.hash=o,!0)}function i(t,...n){return()=>{s(t,...n)}}function a(t){let n=null;for(const e of Object.values(r)){const o=c(t,e);if(o){if(0===o.distance)return o;(!n||o.distance<n.distance)&&(n=o)}}return n}function c(t,n){if(!n)return null;let e=t;const o={};for(let t=0;t<n.length;t++){if(e.length<1)return null;const r=n[t];if(r.startsWith("[")){const t=r.substring(1,r.length-1),[n,s]=l(e);o[t]=n,e=s}else{if(!e.startsWith(r))return null;e=e.substring(r.length+1)}}return{path:t,route:n.join("/"),params:o,distance:e.length}}function l(t){const n=t.indexOf("/");return n<0?[t,""]:[t.substring(0,n),t.substring(n+1)]}class u{constructor(t){this.security=t,this.listeners=new Set,this._value=null,this.handleHashChange=t=>{const n=this.extractHash(t.oldURL),e=this.extractHash(t.newURL),o=this.ensureAbsoluteHash(e,n);o!==e&&history.replaceState({},"",`#${o}`),this.setHash(o)},this.nonEmpty=t=>"string"==typeof t&&t.trim().length>0;const n=this.extractHash(window.location.href);this.setHash(n).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((t=>{console.error(`Unable to set hash to "${n}":`,t)}))}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}get value(){return this._value}setHash(t){return n=this,e=void 0,r=function*(){var n;let e=a(t);if(e)for(const[n,o]of this.security){if(!e.route.startsWith(n))continue;const r=yield o(e.route,t);if(r&&r!==e.route){if(e=a(r),!e)break;return this._value=null,void s(e.path)}}(null===(n=this._value)||void 0===n?void 0:n.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((t=>t(e))))},new((o=void 0)||(o=Promise))((function(t,s){function i(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(n){var e;n.done?t(n.value):(e=n.value,e instanceof o?e:new o((function(t){t(e)}))).then(i,a)}c((r=r.apply(n,e||[])).next())}));var n,e,o,r}extractHash(t){const n=new URL(t).hash;return n?n.startsWith("#")?n.substring(1):n:"/"}ensureAbsoluteHash(t,n){if(t.startsWith("/"))return t;let e=t;for(;e.startsWith("./");)e=e.substring(2);const o=n.split("/").filter(this.nonEmpty);for(const n of t.split("/"))".."===n?o.length>0&&o.pop():o.push(n);return`/${o.filter(this.nonEmpty).join("/")}`}}function h(){const[t,n]=o.useState(p().value);return o.useEffect((()=>{const t=t=>{n(t)};return p().addListener(t),()=>p().removeListener(t)}),[]),t}const d=[];let f=null;function p(){return f||(f=new u(d)),f}},5290:(t,n,e)=>{var o=e(4848),r=e(6540),s=e(5338),i=e(8803),a=e(9419);const c=r.lazy((()=>e.e(906).then(e.bind(e,1906)))),l=r.lazy((()=>e.e(784).then(e.bind(e,9784)))),u=r.lazy((()=>e.e(698).then(e.bind(e,2698)))),h=r.lazy((()=>e.e(300).then(e.bind(e,3300)))),d=r.lazy((()=>e.e(525).then(e.bind(e,9525)))),f=r.lazy((()=>e.e(712).then(e.bind(e,9712))));function p({lang:t}){const n=(0,a.s9)(),e=(0,o.jsx)("div",{children:"Loading..."}),r=c,s=l,i=u,p=h,g=d,m=f;return(0,o.jsx)(A,{path:"/",Page:r,fallback:e,context:n,children:(0,o.jsxs)(A,{path:"/section",fallback:e,context:n,children:[(0,o.jsx)(A,{path:"/section/doors",Page:s,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/garbage",Page:i,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/internet",Page:p,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/kitchen",Page:g,fallback:e,context:n}),(0,o.jsx)(A,{path:"/section/tourism",Page:m,fallback:e,context:n})]})})}function A({path:t,fallback:n,children:e,Page:s,Layout:i,Template:c,context:l}){const u=l&&(0,a.Di)(l.path,a.bw[t]);if(!u)return null;if(0===u.distance){if(!s)return null;const t=c?(0,o.jsx)(c,{params:u.params,children:(0,o.jsx)(s,{params:u.params})}):(0,o.jsx)(s,{params:u.params});return i?(0,o.jsx)(i,{params:u.params,children:(0,o.jsx)(r.Suspense,{fallback:n,children:t})}):(0,o.jsx)(r.Suspense,{fallback:n,children:t})}return i?(0,o.jsx)(i,{params:u.params,children:e}):(0,o.jsx)(o.Fragment,{children:e})}var g=e(5072),m=e.n(g),v=e(7825),b=e.n(v),y=e(7659),w=e.n(y),C=e(5056),x=e.n(C),j=e(540),k=e.n(j),B=e(1113),I=e.n(B),E=e(9165),S={};S.styleTagTransform=I(),S.setAttributes=x(),S.insert=w().bind(null,"head"),S.domAPI=b(),S.insertStyleElement=k(),m()(E.A,S),E.A&&E.A.locals&&E.A.locals,function(){i.Sxu.apply();const t=document.getElementById("root");(0,s.H)(t).render((0,o.jsx)(r.StrictMode,{children:(0,o.jsx)(i.Znq,{children:(0,o.jsx)(p,{})})})),function(){const t=document.getElementById("tgd-logo");t&&(t.classList.add("vanish"),window.setTimeout((()=>{const n=t.parentNode;n&&n.removeChild(t)}),900))}()}()}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var e=r[t]={id:t,exports:{}};return o[t].call(e.exports,e,e.exports,s),e.exports}s.m=o,t=[],s.O=(n,e,o,r)=>{if(!e){var i=1/0;for(u=0;u<t.length;u++){for(var[e,o,r]=t[u],a=!0,c=0;c<e.length;c++)(!1&r||i>=r)&&Object.keys(s.O).every((t=>s.O[t](e[c])))?e.splice(c--,1):(a=!1,r<i&&(i=r));if(a){t.splice(u--,1);var l=o();void 0!==l&&(n=l)}}return n}r=r||0;for(var u=t.length;u>0&&t[u-1][2]>r;u--)t[u]=t[u-1];t[u]=[e,o,r]},s.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return s.d(n,{a:n}),n},s.d=(t,n)=>{for(var e in n)s.o(n,e)&&!s.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((n,e)=>(s.f[e](t,n),n)),[])),s.u=t=>"scr/"+t+"."+{300:"fb7767e7bf11470ce6c8",525:"b890645653b4c3e8e059",698:"22a51f59979df1f7113a",712:"07769b17ebb0c5233a2e",784:"0aecfa0dff75891f167d",906:"44d1c07aa4500c2d31cb"}[t]+".js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),n={},e="...:",s.l=(t,o,r,i)=>{if(n[t])n[t].push(o);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var h=l[u];if(h.getAttribute("src")==t||h.getAttribute("data-webpack")==e+r){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",e+r),a.src=t),n[t]=[o];var d=(e,o)=>{a.onerror=a.onload=null,clearTimeout(f);var r=n[t];if(delete n[t],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((t=>t(o))),e)return e(o)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var n=s.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");if(e.length)for(var o=e.length-1;o>-1&&(!t||!/^http(s?):/.test(t));)t=e[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t+"../"})(),(()=>{var t={524:0};s.f.j=(n,e)=>{var o=s.o(t,n)?t[n]:void 0;if(0!==o)if(o)e.push(o[2]);else{var r=new Promise(((e,r)=>o=t[n]=[e,r]));e.push(o[2]=r);var i=s.p+s.u(n),a=new Error;s.l(i,(e=>{if(s.o(t,n)&&(0!==(o=t[n])&&(t[n]=void 0),o)){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;a.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,o[1](a)}}),"chunk-"+n,n)}},s.O.j=n=>0===t[n];var n=(n,e)=>{var o,r,[i,a,c]=e,l=0;if(i.some((n=>0!==t[n]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(c)var u=c(s)}for(n&&n(e);l<i.length;l++)r=i[l],s.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return s.O(u)},e=self.webpackChunk_=self.webpackChunk_||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),s.nc=void 0;var i=s.O(void 0,[44],(()=>s(5290)));i=s.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,